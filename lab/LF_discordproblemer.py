"""
En streng DNA representeres ofte som en serie med A'er, C'er, 'G' er og 'T'er for hver av nukleotidene.
S친, gitt en streng DNA av en vilk친rlig lengde (feks 'ATGCTTCAGAAAGGTCTTACG'), kunne man laget en funksjon som teller antall ganger hver nukleotide dukker opp, og presenterer det p친 formen 
6, 4, 5, 6
 ?
/me tar p친 seg quiz-hatten
"""

def dna_nukleo(dna: str) -> None:
    return (dna.count('A'), dna.count('C'), dna.count('G'), dna.count('T'))

print(*dna_nukleo('ATGCTTCAGAAAGGTCTTACG'))
print(str(dna_nukleo('ATGCTTCAGAAAGGTCTTACG'))[1:-1])


# ====================================================================
"""P친 vei for 친 gjenskape Jurassic Park p친 r칮kkel칮kka m친 vi desverre ogs친 gjennom 
transkripsjon til RNA. Heldigvis er det ikke s친 mye forskjell! Vi m친 bare flippe T'en 
over til en U, og s친 begynner vi!
(hint er 친 sjekke ut metodene p친 strings)
( S친 feks en DNA streng "GATGGAACTTGACTACGTAAATT" ender opp som "GAUGGAACUUGACUACGUAAAUU" )"""

def gattaca(dna: str) -> str:
    return dna.replace('T', 'U')

print(gattaca('GATGGAACTTGACTACGTAAATT'))

# Ble dette rett? Vi tester!
print( gattaca('GATGGAACTTGACTACGTAAATT') == 'GAUGGAACUUGACUACGUAAAUU')
# Tanken her er at vi sammenligner resultatet fra gattaca() med en kjent st칮rrelse
# Vi bruker == for 친 redusere det til et True/False uttrykk, s친 vi slipper 친 huske
# hva den kjente verdien er, eller hva som er rett at funksjonen returnerer, og bare tar det som at
# "Hvis denne printer True, s친 stemmer det jeg tester for" og avlaster hjernen.


# ====================================================================
"""For mens jeg pr칮ver 친 gjenskape jurassic park her, s친 mista jeg litt chemical x i blandeb칮tta, 
og det blir jo farlig om vi slipper ut masse mutanter, s친 jeg m친 finne ut hvor mange mutasjoner 
det er mellom to strenger med DNA ; 游땵 
F칮r: GAGCCTACTAACGGGAT
Etter: CATCGTAATGACGGCCT 

Jeg er helt r친dvill! Hvis det er for mange mutasjoner, s친 f친r jeg ikke en s칮t dinosaur, 
men en dodofugl. Ohright, hvis en bokstav er endra mellom f칮r og etter, s친 er det en mutasjon."""

def dino_or_dodo(dna1: str, dna2: str) -> int:
    avvik = 0

    for idx, nuc in enumerate(dna1):
        if nuc != dna2[idx]:
            avvik += 1

    return avvik

print(
    dino_or_dodo('GAGCCTACTAACGGGAT', 'CATCGTAATGACGGCCT')
)


# ====================================================================
"""Team TA er slu. Vi har begynt 친 snike oss rundt hver gang det er bedpres og knabbe litt pizza.
Tidligere har f칮rste som har funnet rett rom sendt epost til resten av gjengen, men fakultetet
aner ugler i mosen og har begynt 친 f칮lge med ekstra. For 친 fortsette 친 nyte det gode pizzalivet
har vi begynt 친 kryptere epostene, denne gang med et tradisjonelt C칝sarschiffer.
Grunnideen er at man shifter et alfabet bortover med 13 tegn til h칮yre (친ja, og den wrapper rundt
n친r det g친r for langt), s친 en "A" i klartekst blir en "N" i schiffrert tekst, X blir K, M blir Z, osv..
Alle er velkomne til 친 bli med p친 pizzajakten, men dekrypteringsprogrammet v친rt er propriet칝rt (tm),
s친 andre m친 finne sin egen l칮sning :V
 "Jeg er s친 kreativ" 
Oj! Der tikka neste bedpres inn!

GREZVANYEBZ XY GBYI, BAFQNT  """

def TAs_pizzaparty (hemmelighet: str) -> str:
    alfabet = [*'abcdefghijklmnopqrstuvwxyz'.upper()]
    
    # Enkel cheesy h친ndtering av "dette burde ikke v칝re i strengen"
    if hemmelighet not in alfabet:
        return hemmelighet
    
    # Men dette er essensen i c칝sarschifferet:
    return alfabet[(alfabet.index(hemmelighet.upper()) + 13) % 26]

# L칮kker er ikke dekket enn친, men virker som om de fleste kan? og n친
# har vi begynt 친 snakke om map, s친 why the not
print( ''.join(map(TAs_pizzaparty, 'GREZVANYEBZ XY GBYI BAFQNT')) )



# ====================================================================
""""Ordboka definerer palindrom som et ord eller uttrykk som kan leses 
likt begge veier; for eksempel 'madam', 'rotor', 'ella redder alle'"
Kan vi lage en funksjon som tar en streng, og returnerer True/False avhengig av 
hvorvidt strengen er et palindrom eller ei?"""


def er_palindrom(tekst: str) -> bool:
    return tekst == tekst[::-1]

print(
    er_palindrom('madam'),
    er_palindrom('ella redder alle'),
    er_palindrom('molde')
)